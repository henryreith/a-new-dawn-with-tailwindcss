{"version":3,"file":"cart_reccomendtions.min.js","mappings":"AAmFA","sources":["webpack://dawn-tailwind-starter/./src/js/cart-reccomendations.js"],"sourcesContent":["// Function to fetch and render the upsell section\nfunction fetchUpsellSectionHTML(productID) {\n  const productRecommendationsSection = document.querySelector('.product-recommendations');\n  // Clear existing content\n  productRecommendationsSection.innerHTML = '';\n\n  // fetch the new recommendations\n  fetch(`${window.Shopify.routes.root}recommendations/products?product_id=${productID}&limit=4&section_id=drawer-cart-recc&intent=related`)\n    .then(response => response.text())\n    .then((text) => {\n      console.log(text);\n      // Directly set the innerHTML of the container to the fetched text\n      productRecommendationsSection.innerHTML = text;\n\n      if (productRecommendationsSection.innerHTML.trim().length) {\n        console.log('Recommendations section updated');\n      } else {\n        console.log('No recommendations found for this product.');\n      }\n    })\n    .catch((e) => console.error('Error fetching product recommendations:', e));\n}\n\n\n// Function to fetch the cart data\nfunction fetchCartData() {\nreturn fetch(`${window.Shopify.routes.root}cart.json`)\n    .then(response => {\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n    });\n}\n\n// Function to get the product_id of the first item in the cart\nfunction getFirstProductIdInCart() {\nfetchCartData()\n    .then(cart => {\n    // Assuming the first item in the `items` array is the last added item\n    const firstItem = cart.items[0];\n    if (firstItem) {\n        const productID = firstItem.product_id;\n        // Here you can now call the recommendations API with this product ID\n        fetchUpsellSectionHTML(productID);\n    } else {\n        console.log('No items in the cart.');\n        // Do nothing as there are no items in cart so we don't want to init the reccomendations\n    }\n    })\n    .catch(error => {\n    console.error('Error fetching cart data:', error);\n    });\n}\n\n// Handle the cart update or drawer open events to kick off the recommendations request\nfunction initCartRecommendations() {\n  getFirstProductIdInCart();\n}\n\n// Handle the cart update event\nfunction latestCartUpdate(eventData) {\n  console.log(eventData); // Debugging to view the structure of eventData\n\n  const cartItems = eventData.cartData.items;\n  const latestVariantId = eventData.variantId;\n\n  if (cartItems.length > 0) {\n\n    // Check if the latest updated variant is new to the cart\n    const isNewVariant = cartItems.some(item => item.variant_id.toString() === latestVariantId && item.quantity === 1);\n\n    // If the variant is new or other criteria for fetching recommendations are met, fetch new recommendations\n    if (isNewVariant) {\n        console.log('Variant update requires new recommendations.');\n        const firstItemProductId = cartItems[0].product_id; // Get the product_id of the first item\n        fetchUpsellSectionHTML(firstItemProductId);\n    } else {\n        console.log('Variant update does not require new recommendations.');\n    }\n  }\n}\n\nsubscribe(PUB_SUB_EVENTS.cartUpdate, (eventData) => {\n  // Call latestCartUpdate with the event data\n  // latestCartUpdate(eventData);\n});\n  \n// const debouncedInitCartRecommendations = debounce(initCartRecommendations, 1);\n\n// Subscribe to the cartUpdate event using the Dawn theme's pub/sub system\nsubscribe(PUB_SUB_EVENTS.cartUpdate, () => {\n  // debouncedInitCartRecommendations();\n});\n\n// Listen for when the cart drawer is opened\ndocument.addEventListener('cartDrawerOpened', function() {\n  // Call the debounced function to fetch and display recommendations\n  // debouncedInitCartRecommendations();\n  // console.log('Cart drawer opened');\n});\n\n  \n/* \nShopify's reccomened way to return the recommendations then look for the same class in the html to only insert that. But in this case i want to insert the whole section\n// Function to fetch and render the upsell section\nfunction fetchUpsellSectionHTML(productID) {\n  const productRecommendationsSection = document.querySelector('.product-recommendations');\n  // Clear existing content\n  productRecommendationsSection.innerHTML = '';\n  // fetch the new recommendations\n  fetch(`${window.Shopify.routes.root}recommendations/products?product_id=${productID}&limit=4&section_id=drawer-cart-recc&intent=related`)\n  .then(response => response.text())\n  .then((text) => {\n      console.log(text);\n      const html = document.createElement('div');\n      html.innerHTML = text;\n      // Find the product recommendations section in the response HTML to use to insert in the page\n      const recommendations = html.querySelector('.product-recommendations');\n\n      if (recommendations && recommendations.innerHTML.trim().length) {\n        productRecommendationsSection.innerHTML = recommendations.innerHTML;\n        console.log('Recommendations section updated');\n      } else {\n        console.log('No recommendations found for this product.');\n      }\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Function to fetch and render the upsell section\n  function fetchUpsellSection() {\n    fetch(window.Shopify.routes.root + \"recommendations/products?product_id=7614848860381&limit=4&section_id=drawer-cart-recc&intent=related\")\n      .then(response => response.text())\n      .then((text) => {\n        // Assuming you have a container with the ID 'upsell-section' in your cart page where you want to load the upsell items\n        const upsellSectionContainer = document.getElementById('drawer__recommendations-grid');\n        if (upsellSectionContainer) {\n          upsellSectionContainer.innerHTML = text;\n        }\n      })\n      .catch((e) => console.error('Error fetching upsell section:', e));\n  }\n\n  // Call this function whenever you want to refresh the upsell section,\n  // for example after a cart update event\n  fetchUpsellSection();\n});\n\n// You will need to implement the addToCart function to work with your cart system\nfunction addToCart(variantId) {\n// Add the item to the cart using Shopify's AJAX API or update the cart form\nconsole.log('Adding item to cart with variant ID:', variantId);\n// Implementation goes here\n}\n\n// This function could be responsible for making an API call to Shopify's recommendations endpoint\nfunction fetchAndDisplayRecommendations(productId) {\nfetch(`${window.Shopify.routes.root}recommendations/products.json?product_id=${productId}&limit=4&intent=related`)\n    .then(response => response.json())\n    // .then(data => {console.log(data);})\n    .then(({ products }) => {\n    // Now you have your recommendations data\n    // You should create a function to update your cart UI with this data\n    if (products.length > 0) {\n        // updateCartWithRecommendations(products);\n        console.log('Recommendations:', products);\n    } else {\n        console.log('No recommendations found for this product.');\n    }\n    })\n    .catch(error => {\n    console.error('Fetching recommendations failed:', error);\n    });\n}\n\n// Function to update the cart UI with the recommendations\nfunction updateCartWithRecommendations(recommendedProducts) {\n// Assuming you have a div with the ID 'recommendations' where you want to display the products\nconst recommendationsContainer = document.getElementById('recommendations');\nrecommendationsContainer.innerHTML = ''; // Clear previous recommendations\n\nrecommendedProducts.forEach((product) => {\n    // Create HTML elements for each recommended product\n    const productCard = document.createElement('div');\n    productCard.className = 'product-card';\n\n    const productImage = document.createElement('img');\n    productImage.src = product.featured_image;\n    productImage.alt = product.title;\n    productImage.className = 'product-card__image';\n\n    const productTitle = document.createElement('h3');\n    productTitle.textContent = product.title;\n    productTitle.className = 'product-card__title';\n\n    const productPrice = document.createElement('p');\n    productPrice.textContent = `$${(product.price / 100).toFixed(2)}`;\n    productPrice.className = 'product-card__price';\n\n    // Add a button to allow users to add the recommended product to the cart\n    const addToCartButton = document.createElement('button');\n    addToCartButton.textContent = 'Add to Cart';\n    addToCartButton.className = 'product-card__add-to-cart';\n    addToCartButton.onclick = () => {\n    // You will need to implement this function to actually add the item to the cart\n    addToCart(product.variants[0].id);\n    };\n\n    // Append elements to the product card\n    productCard.appendChild(productImage);\n    productCard.appendChild(productTitle);\n    productCard.appendChild(productPrice);\n    productCard.appendChild(addToCartButton);\n\n    // Append the product card to the recommendations container\n    recommendationsContainer.appendChild(productCard);\n});\n}\n\n// This function could be responsible for making an API call to Shopify's recommendations endpoint\nfunction fetchAndDisplayRecommendations(productVariantId) {\n    // Call the recommendations API using the product variant ID\n    fetch(`/recommendations/products.json?product_id=${productVariantId}`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        // Now you have your recommendations data\n        // You should create a function to update your cart UI with this data\n        updateCartWithRecommendations(data.products);\n      })\n      .catch(error => {\n        console.error('Fetching recommendations failed: ', error);\n      });\n  }\n  \n  // This function would take the products data from the API and update the DOM accordingly\n  function updateCartWithRecommendations(recommendedProducts) {\n    const recommendationsContainer = document.getElementByClass('cart_recommendations--wrapper'); // Replace with your actual container ID or class\n    // Clear existing recommendations\n    recommendationsContainer.innerHTML = '';\n  \n    recommendedProducts.forEach(product => {\n      // Create HTML elements for each recommended product\n      // This is a simplistic example, you'll need to format it to match your site's HTML/CSS structure\n      const productElement = document.createElement('div');\n      productElement.className = 'recommended-product';\n      productElement.innerHTML = `\n        <img src=\"${product.image.src}\" alt=\"${product.title}\">\n        <p>${product.title}</p>\n        <p>$${(product.price / 100).toFixed(2)}</p>\n        <button onclick=\"addToCart(${product.id})\">Add to Cart</button>\n      `;\n      recommendationsContainer.appendChild(productElement);\n    });\n  }\n  \n  // Handle the cart update event by fetching recommendations\n  function handleCartUpdate(event) {\n    const lastAddedVariantId = event.cartData.variant_id; // Make sure you are getting the right ID for the API call\n    console.log('Last added variant ID: ', lastAddedVariantId); // Debugging\n    console.log(event); // Debugging\n    // fetchAndDisplayRecommendations(lastAddedVariantId);\n  }\n  \n  // Subscribe to the cart update event\n  subscribe(PUB_SUB_EVENTS.cartUpdate, handleCartUpdate);\n  */"],"names":[],"sourceRoot":""}